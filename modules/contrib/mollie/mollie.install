<?php

/**
 * @file
 * Install, update and uninstall hooks for Mollie for Drupal.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\mollie\Mollie;
use Mollie\Api\MollieApiClient;

/**
 * Implements hook_requirements().
 */
function mollie_requirements($phase) {
  $requirements = [];

  switch ($phase) {
    case 'install':
      // TODO: This does not work when enabling the module using Drush (9.5.x).
      if (!class_exists(MollieApiClient::class)) {
        $requirements['mollie_client'] = [
          'title' => t('Missing Mollie API client'),
          'description' => t('The Mollie API client is missing. Run "composer require mollie/mollie-api-php" in the root of the project to install it.'),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
      break;

    case 'runtime':
      if (!class_exists(MollieApiClient::class)) {
        $requirements['mollie_client'] = [
          'title' => t('Mollie API client'),
          'value' => t('Missing'),
          'description' => t('The Mollie API client is missing. Run "composer require mollie/mollie-api-php" in the root of the project to install it.'),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
      else {
        $version = MollieApiClient::CLIENT_VERSION;
        $requirements['mollie_client'] = [
          'title' => t('Mollie API client'),
          'value' => $version,
          'description' => t(
            'Mollie API client version @version is installed.',
            ['@version' => $version]
          ),
          'severity' => REQUIREMENT_OK,
        ];
      }

      /** @var \Drupal\mollie\MollieConfigValidatorInterface $configValidator */
      $configValidator = \Drupal::service('mollie.config_validator');

      if ($configValidator->hasLiveApiKey()) {
        $requirements['mollie_live_key'] = [
          'title' => t('Mollie API live key'),
          'value' => t('Set'),
          'description' => t('Mollie API live key is configured.'),
          'severity' => REQUIREMENT_OK,
        ];
      }
      else {
        $requirements['mollie_live_key'] = [
          'title' => t('Mollie API live key'),
          'value' => t('Missing'),
          'description' => t('Mollie API live key is missing. Add it to the settings.php file.'),
          'severity' => REQUIREMENT_WARNING,
        ];
      }

      if ($configValidator->hasTestApiKey()) {
        $requirements['mollie_test_key'] = [
          'title' => t('Mollie API test key'),
          'value' => t('Set'),
          'description' => t('Mollie API test key is configured.'),
          'severity' => REQUIREMENT_OK,
        ];
      }
      else {
        $requirements['mollie_test_key'] = [
          'title' => t('Mollie API test key'),
          'value' => t('Missing'),
          'description' => t('Mollie API test key is missing. Add it to the settings.php file.'),
          'severity' => REQUIREMENT_WARNING,
        ];
      }

      /** @var \Drupal\mollie\Mollie $mollieClient */
      $mollieClient = \Drupal::service('mollie.mollie');
      if ($mollieClient->useTestMode()) {
        $requirements['mollie_test_mode'] = [
          'title' => t('Mollie API test mode'),
          'value' => t('Enabled'),
          'description' => t('Mollie is running in test mode. Be aware that no actual money will be transfered.'),
          'severity' => REQUIREMENT_WARNING,
        ];
      }

      break;

    default:
      break;
  }

  return $requirements;
}

/**
 * Add missing amount fields for payments.
 */
function mollie_update_9101() {
  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $entity_definition_update_manager */
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();

  // Refunded amount.
  $refunded_amount = BaseFieldDefinition::create('float')
    ->setLabel(t('Refunded amount'))
    ->setRequired(TRUE)
    ->setDisplayOptions(
      'form',
      [
        'type' => 'string_textfield',
        'weight' => 10,
      ]
    );
  $entity_definition_update_manager->installFieldStorageDefinition('refunded_amount', 'mollie_payment', 'mollie_payment', $refunded_amount);

  // Refunded currency.
  $refunded_currency = BaseFieldDefinition::create('list_string')
    ->setLabel(t('Refunded currency'))
    ->setRequired(TRUE)
    ->setSetting(
      'allowed_values',
      ['EUR' => 'Euro', 'USD' => 'USD']
    )
    ->setDisplayOptions(
      'form',
      [
        'type' => 'options_select',
        'weight' => 5,
      ]
    );
  $entity_definition_update_manager->installFieldStorageDefinition('refunded_currency', 'mollie_payment', 'mollie_payment', $refunded_currency);

  // Refundable amount.
  $refundable_amount = BaseFieldDefinition::create('float')
    ->setLabel(t('Refundable amount'))
    ->setRequired(TRUE)
    ->setDisplayOptions(
      'form',
      [
        'type' => 'string_textfield',
        'weight' => 10,
      ]
    );
  $entity_definition_update_manager->installFieldStorageDefinition('refundable_amount', 'mollie_payment', 'mollie_payment', $refundable_amount);

  // Refundable currency.
  $refundable_currency = BaseFieldDefinition::create('list_string')
    ->setLabel(t('Refundable currency'))
    ->setRequired(TRUE)
    ->setSetting(
      'allowed_values',
      ['EUR' => 'Euro', 'USD' => 'USD']
    )
    ->setDisplayOptions(
      'form',
      [
        'type' => 'options_select',
        'weight' => 5,
      ]
    );
  $entity_definition_update_manager->installFieldStorageDefinition('refundable_currency', 'mollie_payment', 'mollie_payment', $refundable_currency);

  // Captured amount.
  $captured_amount = BaseFieldDefinition::create('float')
    ->setLabel(t('Captured amount'))
    ->setRequired(TRUE)
    ->setDisplayOptions(
      'form',
      [
        'type' => 'string_textfield',
        'weight' => 10,
      ]
    );
  $entity_definition_update_manager->installFieldStorageDefinition('captured_amount', 'mollie_payment', 'mollie_payment', $captured_amount);

  // Captured currency.
  $captured_currency = BaseFieldDefinition::create('list_string')
    ->setLabel(t('Captured currency'))
    ->setRequired(TRUE)
    ->setSetting(
      'allowed_values',
      ['EUR' => 'Euro', 'USD' => 'USD']
    )
    ->setDisplayOptions(
      'form',
      [
        'type' => 'options_select',
        'weight' => 5,
      ]
    );
  $entity_definition_update_manager->installFieldStorageDefinition('captured_currency', 'mollie_payment', 'mollie_payment', $captured_currency);

  // Charged back amount.
  $charged_back_amount = BaseFieldDefinition::create('float')
    ->setLabel(t('Charged back amount'))
    ->setRequired(TRUE)
    ->setDisplayOptions(
      'form',
      [
        'type' => 'string_textfield',
        'weight' => 10,
      ]
    );
  $entity_definition_update_manager->installFieldStorageDefinition('charged_back_amount', 'mollie_payment', 'mollie_payment', $charged_back_amount);

  // Charged back currency.
  $charged_back_currency = BaseFieldDefinition::create('list_string')
    ->setLabel(t('Charged back currency'))
    ->setRequired(TRUE)
    ->setSetting(
      'allowed_values',
      ['EUR' => 'Euro', 'USD' => 'USD']
    )
    ->setDisplayOptions(
      'form',
      [
        'type' => 'options_select',
        'weight' => 5,
      ]
    );
  $entity_definition_update_manager->installFieldStorageDefinition('charged_back_currency', 'mollie_payment', 'mollie_payment', $charged_back_currency);
}

/**
 * Implements hook_uninstall().
 */
function mollie_uninstall($is_syncing) {
  // Clean up the key/value store.
  \Drupal::keyValue(Mollie::LAST_WEBHOOK_INVOCATION_COLLECTION_KEY)->deleteAll();
}
