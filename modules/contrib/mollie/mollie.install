<?php

/**
 * @file
 * Install, update and uninstall hooks for Mollie for Drupal.
 */

use Mollie\Api\MollieApiClient;

/**
 * Implements hook_requirements().
 */
function mollie_requirements($phase) {
  $requirements = [];

  switch ($phase) {
    case 'install':
      // TODO: This does not work when enabling the module using Drush (9.5.x).
      if (!class_exists(MollieApiClient::class)) {
        $requirements['mollie_client'] = [
          'title' => t('Missing Mollie API client'),
          'description' => t('The Mollie API client is missing. Run "composer require mollie/mollie-api-php" in the root of the project to install it.'),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
      break;

    case 'runtime':
      if (!class_exists(MollieApiClient::class)) {
        $requirements['mollie_client'] = [
          'title' => t('Mollie API client'),
          'value' => t('Missing'),
          'description' => t('The Mollie API client is missing. Run "composer require mollie/mollie-api-php" in the root of the project to install it.'),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
      else {
        $version = MollieApiClient::CLIENT_VERSION;
        $requirements['mollie_client'] = [
          'title' => t('Mollie API client'),
          'value' => $version,
          'description' => t(
            'Mollie API client version @version is installed.',
            ['@version' => $version]
          ),
          'severity' => REQUIREMENT_OK,
        ];
      }

      /** @var \Drupal\mollie\MollieConfigValidatorInterface $configValidator */
      $configValidator = \Drupal::service('mollie.config_validator');

      if ($configValidator->hasLiveApiKey()) {
        $requirements['mollie_live_key'] = [
          'title' => t('Mollie API live key'),
          'value' => t('Set'),
          'description' => t('Mollie API live key is configured.'),
          'severity' => REQUIREMENT_OK,
        ];
      }
      else {
        $requirements['mollie_live_key'] = [
          'title' => t('Mollie API live key'),
          'value' => t('Missing'),
          'description' => t('Mollie API live key is missing. Add it to the settings.php file.'),
          'severity' => REQUIREMENT_WARNING,
        ];
      }

      if ($configValidator->hasTestApiKey()) {
        $requirements['mollie_test_key'] = [
          'title' => t('Mollie API test key'),
          'value' => t('Set'),
          'description' => t('Mollie API test key is configured.'),
          'severity' => REQUIREMENT_OK,
        ];
      }
      else {
        $requirements['mollie_test_key'] = [
          'title' => t('Mollie API test key'),
          'value' => t('Missing'),
          'description' => t('Mollie API test key is missing. Add it to the settings.php file.'),
          'severity' => REQUIREMENT_WARNING,
        ];
      }

      /** @var \Drupal\mollie\Mollie $mollieClient */
      $mollieClient = \Drupal::service('mollie.mollie');
      if ($mollieClient->useTestMode()) {
        $requirements['mollie_test_mode'] = [
          'title' => t('Mollie API test mode'),
          'value' => t('Enabled'),
          'description' => t('Mollie is running in test mode. Be aware that no actual money will be transfered.'),
          'severity' => REQUIREMENT_WARNING,
        ];
      }

      break;

    default:
      break;
  }

  return $requirements;
}
