<?php

use Drupal\Component\Serialization\Yaml;
use Drupal\media\Entity\Media;
use Drupal\node\NodeInterface;
use Drupal\webform\Entity\Webform;
use Drupal\node\Entity\Node;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\webform\WebformInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\StringTranslationTrait;
use Drupal\Core\StringTranslation\TranslationInterface;

/**
 * Implements hook_FORM_alter().
 */
function rema_webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if(!empty($form_state->getValue('total_amount'))){
    $form['elements']['extra']['extra_total']['#default_value'] = $form_state->getValue('total_amount');
  }

  if ($form['elements']['selection']) {
    $bundle = Node::load($form['elements']['selection']['#value']);
  }
  else {
    $bundle = Node::load($form_state->getValue('bundle_select'));
  }

  if ($bundle instanceof NodeInterface) {
    $bundle_price = $bundle->get('field_bundle_price')->getValue();
    $form['elements']['bundle']['bundle_total']['#min'] = $bundle_price[0]['value'];
  }

  $form['#validate'][] = 'rema_webform_form_validate';
}

/**
 * Implements hook_FORM_alter().
 */
function rema_webform_form_validate(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $node = Drupal::routeMatch()->getParameter('node');
  // Initiate total
  $total= 0;

  if($node instanceof NodeInterface){
    // Get bundle price
    if($form_state->getValue('bundle_select')){
      $bundle = Node::load($form_state->getValue('bundle_select'));
    }
    else {
      $bundle = Node::load($form_state->getValue('selection'));
    }

    if($bundle instanceof NodeInterface){
      $bundle_price = $bundle->get('field_bundle_price')->getValue();
      $products = $bundle->get('field_bundle_products')->getValue();

      if(!empty($bundle_price)){
        $total += (float)trim($bundle_price[0]['value']);
      }

      foreach ($products as $product) {
        $product = Node::load($product['target_id']);
        $size_ranges = $product->get('field_product_size_range')->getValue();
        $price = 0.00;
       
        if (empty($bundle_price) && !empty($size_ranges)) {
          foreach($size_ranges as $size_range) {
            $opt_group = Node::load($size_range['target_id']);
            $opt_name = $opt_group->getTitle();
            if (str_starts_with($form_state->getValue('bundle_product_' .  $product->id() . '_size'), $opt_name)) {
              $price = (float)$opt_group->get('field_size_price')->getValue()[0]['value'];
            }
          }
        }

        if($form_state->getValue('bundle_product_' . $product->id() . '_print')){
          $price += 4.00;
          $form_state->setValue('print_status', true);
        }

        $amount = (float)$form_state->getValue('bundle_product_' . $product->id() . '_amount');
  
        $total += $amount * $price;
      }
    }

    // Get products
    $products = $node->get('field_bundle_products')->getValue();

    foreach ($products as $product) {
      $product = Node::load($product['target_id']);
      $size_ranges = $product->get('field_product_size_range')->getValue();
      $price = 0.00;

      if (!empty($size_ranges)) {
        foreach($size_ranges as $size_range) {
          $opt_group = Node::load($size_range['target_id']);
          $opt_name = $opt_group->getTitle();
          if (str_starts_with($form_state->getValue('bundle_product_' .  $product->id() . '_size'), $opt_name)) {
            $price = (float)$opt_group->get('field_size_price')->getValue()[0]['value'];
          }
        }
      }

      if($form_state->getValue('extra_product_' .  $product->id() . '_print')){
        $price += 4.00;
        $form_state->setValue('print_status', true);
      }

      $amount = (float)$form_state->getValue('extra_product_' . $product->id() . '_amount');

      $total += $amount * $price;
    }

    $shipment = $node->get('field_shipment')->getValue();

    if(!empty($shipment)) {
      $total += (float)($form_state->getValue('shipment_select'));
    }

    $form_state->setValue('total_amount', $total);
  }
}

/**
 * Add email handler.
 */
function add_email_handler(WebformInterface $webform, $id, $to_mail, $subject, $message, $payment, $products) {
  /** @var \Drupal\webform\WebformHandlerInterface $webform_handler_manager */
  $webform_handler_manager = \Drupal::service('plugin.manager.webform.handler');

  // Create a \Drupal\webform\Plugin\WebformHandler\EmailWebformHandler.
  $webform_handler = $webform_handler_manager->createInstance('email');

  $conditions = [];

  if($payment){
    $conditions = [
      'enabled' => [
        ':input[name="payment_status"]' => [
          'value' => 'paid'
        ]
      ]
    ];
  }

  $rows = [];

  foreach ($products as $product) {
    $product_id = $product['target_id'];

    $product = Node::load($product_id);

    if ($product instanceof NodeInterface) {
      $product_title = $product->getTitle();
      $product_id = $product->id();
      $product_key = '_product_'.$product_id;    
      $bundle_product_print = $product->get('field_product_print')->getValue()[0]['value'] ? '{{ webform_token("[webform_submission:values:bundle'.$product_key.'_print]", webform_submission, [], options) }}' : 'Nvt';
      $extra_product_print = $product->get('field_product_print')->getValue()[0]['value'] ? '{{ webform_token("[webform_submission:values:extra'.$product_key.'_print]", webform_submission, [], options) }}' : 'Nvt';
      $style = 'style="padding-top: 5px; padding-right: 7px; padding-bottom: 5px; padding-left: 7px;"';
      $rows[] = 
      '{% if webform_token("[webform_submission:values:bundle'.$product_key.'_size]", webform_submission, [], options) or webform_token("[webform_submission:values:extra'.$product_key.'_size]", webform_submission, [], options) %}<tr>
      <td>'.$product_title.'</td>
      <td style="text-align: center;">{{ webform_token("[webform_submission:values:bundle'.$product_key.'_size]", webform_submission, [], options) }}</td>
      <td style="text-align: center;">{{ webform_token("[webform_submission:values:bundle'.$product_key.'_amount]", webform_submission, [], options) }}</td>
      <td style="text-align: center;">' . $bundle_product_print . '</td>
      <td style="text-align: center;">{{ webform_token("[webform_submission:values:extra'.$product_key.'_size]", webform_submission, [], options) }}</td>
      <td style="text-align: center;">{{ webform_token("[webform_submission:values:extra'.$product_key.'_amount]", webform_submission, [], options) }}</td>
      <td style="text-align: center;">' . $extra_product_print . '</td>
      </tr>{% endif %}';
    }
  }

  $product_rows = implode($rows);
  $table= 
  '<h2>{{ webform_token("[webform_submission:values:name]", webform_submission, [], options) }} 
  {{ webform_token("[webform_submission:values:first_name]", webform_submission, [], options) }}</h2>
  <p>{{ webform_token("[webform_submission:values:mobile]", webform_submission, [], options) }}<br>
  {{ webform_token("[webform_submission:values:e_mail]", webform_submission, [], options) }}</p><br>
  <table><tr>
  <th>Product</th>
  <th>Maat</th>
  <th>Aantal</th>
  <th>Bedrukking</th>
  <th>Extra</th>
  <th>Aantal</th>
  <th>Bedrukking</th></tr>' 
    . $product_rows . 
  '</table><p><b>Totaal:</b> â‚¬ {{ webform_token("[webform_submission:values:total_amount]", webform_submission, [], options) }}</p>';

  // Configuration copied from exported webform.webform.contact.yml
  $webform_handler->setConfiguration([
    'id' => $id,
    'label' => ucfirst(str_replace('_', ' ', $id)),
    'handler_id' => $id,
    'status' => 1,
    'conditions' => $payment ? ['enabled' => [':input[name="payment_status"]' => ['value' => 'paid']]] : [],
    'weight' => 0,
    'settings' => [
      'to_mail' => $to_mail,
      'to_options' => array(),
      'cc_mail' => '',
      'cc_options' => array(),
      'bcc_mail' => '',
      'bcc_options' => array(),
      'from_options' => array(),
      'subject' => $subject,
      'body' => $message.$table,
      'exclude_empty_checkbox' => TRUE,
      'twig' => TRUE,
      'attachments' => FALSE,
      'debug' => 0,
      'reply_to' => '',
      'return_path' => '',
    ],
  ]);

  // Must update original id to prevent the below error.
  // Drupal\Core\Config\ConfigNameException: The machine name of the 'Webform'
  // bundle cannot be changed in
  // Drupal\Core\Config\Entity\ConfigEntityBundleBase->preSave()
  $webform->setOriginalId($webform->id());

  // Add handle to the webform, which triggers another save().
  $webform->addWebformHandler($webform_handler);
}

/**
 * Add payment handler.
 */
function add_payment_handler(WebformInterface $webform, $status) {
  /** @var \Drupal\webform\WebformHandlerInterface $webform_handler_manager */
  $webform_handler_manager = \Drupal::service('plugin.manager.webform.handler');

  // Create a \Drupal\webform\Plugin\WebformHandler\EmailWebformHandler.
  $webform_handler = $webform_handler_manager->createInstance('mollie_payment_handler');

  // Configuration copied from exported webform.webform.contact.yml
  $webform_handler->setConfiguration([
    'id' => $webform->id(),
    'label' => 'Mollie payment',
    'handler_id' => 'mollie_payment',
    'status' => $status,
    'weight' => 0,
    'settings' => [
      'amount_element' => 'total_amount',
      'currency' => 'EUR',
    ],
  ]);

  // Must update original id to prevent the below error.
  // Drupal\Core\Config\ConfigNameException: The machine name of the 'Webform'
  // bundle cannot be changed in
  // Drupal\Core\Config\Entity\ConfigEntityBundleBase->preSave()
  $webform->setOriginalId($webform->id());

  // Add handle to the webform, which triggers another save().
  $webform->addWebformHandler($webform_handler);
}


/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function rema_webform_node_presave(NodeInterface $node)
{
  if ($node->bundle() == 'webform') {
    $webform = Webform::load('webform_' . $node->id());

    // Update webform
    if ($webform instanceof WebformInterface) {
      // Set settings
      $settings = create_settings($node);

      // Set elements
      $elements = create_webform($node);

      $webform->set('elements', $elements);
      $webform->set('settings', $settings);

      $webform->save();
    }

    // Create webform
    else {
      // Set settings
      $settings = create_settings($node);

      // Set elements
      $elements = create_webform($node);

      // Create a webform.
      $webform = Webform::create([
        'id' => 'webform_' . $node->id(),
        'title' => $node->getTitle(),
        'elements' => Yaml::encode($elements),
        'settings' => $settings,
      ]);

      $webform->save();
    }

    // Add Mollie payment handler
    $payment = $node->get('field_payment')->getValue()[0]['value'];

    if($payment){
      $payment_handler = add_payment_handler($webform, TRUE);
    }
    else {
      $payment_handler = add_payment_handler($webform, FALSE);
    }

    $products = $node->get('field_bundle_products')->getValue();
    $subject = 'Bestelling [webform:title] [webform_submission:sid]';

    if($payment){
      $email_handler = add_email_handler($webform, 'email', '[site:mail]', $subject, null, TRUE, $products);
    }
    else {
      $email_handler = add_email_handler($webform, 'email', '[site:mail]', $subject, null, FALSE, $products);
    }
    
    // Add client email handler
    $message = $node->get('field_confirmation_mail')->getValue();

    if($payment){
      $client_email_handler = add_email_handler($webform, 'client_email', '[webform_submission:values:e_mail:raw]', $subject, $message[0]['value'], TRUE, $products);
    }
    else {
      $client_email_handler = add_email_handler($webform, 'client_email', '[webform_submission:values:e_mail:raw]', $subject, $message[0]['value'], FALSE, $products);
    }

    $node->set('webform', $webform->id());
  }
}

/**
 * @param $node
 * @return array
 */
function create_settings($node){
  $confirmation_message = $node->get('field_confirmation_message')->getValue();

  $settings = [
    'wizard_progress_states' => TRUE,
    'confirmation_type' => 'page',
    'confirmation_message' => !empty($confirmation_message) ? $confirmation_message[0]['value'] : '',
    'confirmation_attributes' => [
      'style' => 'align-items: center'
    ],
    'confirmation_back_attributes' => [
      'class' => 'button'
    ],
    'form_required' => TRUE
  ];

  // Append default settings.
  $settings += Webform::getDefaultSettings();

  return $settings;
}

/**
 * @param $node
 */
function create_webform($node){
  $bundles = $node->get('field_webform_bundles')->getValue();

  // Build a render array of elements.
  $elements= [];
  $products = $node->get('field_bundle_products')->getValue();

  if (!empty($bundles)) {
    $elements = create_selection_page($bundles, $node);
    $elements = create_bundle_page($elements, $products, $node);
  }

  if (!empty($products)) {
    $elements = create_free_choice($elements, $products, $node);
  }

  // Add shipment page
  if($node->get('field_shipment')->getValue()) {
    $elements['shipment_page'] = [
      '#type' => 'webform_wizard_page',
      '#title' => 'Verzending',
    ];

    
    if($node->get('field_shipment_description')->getValue()){
      $elements['shipment_page']['shipment_description'] = [
        '#type' => 'processed_text',
        '#text' => $node->get('field_shipment_description')->getValue()[0]['value'],
        '#format' => 'full_html'
      ];
    }
    
    $elements['shipment_page']['shipment_select'] = [
      '#type' => 'radios',
      '#title' => 'Verzendopties',
      '#options' => [
        0 =>t('Pick up at store: free')->__tostring(),
        (string)$node->get('field_shipment')->getValue()[0]['value'] => t("Send to this address: â‚¬ @shipment", array('@shipment' => $node->get('field_shipment')->getValue()[0]['value']))->__tostring()
      ],
      '#required' => true,
    ];

    $elements['shipment_page']['shipment_address'] = [
      '#type' => 'webform_address',
      '#title' => 'Verzendadres',
      '#address_2__access' => false,
      '#state_province__access' => false,
      '#country__access' => false,
      '#states' => [
        'required' => [
          ':input[name="shipment_select"]' => [
            'value' => (string)$node->get('field_shipment')->getValue()[0]['value']
          ]
        ]
      ]
    ];
  }

  // Personal page
  $elements['personal_data'] = [
    '#type' => 'webform_wizard_page',
    '#title' => 'Persoonsgegevens',
  ];

   if($node->get('field_personal_data_description')->getValue()){
    $elements['personal_data']['personal_data_description'] = [
      '#type' => 'processed_text',
      '#text' => $node->get('field_personal_data_description')->getValue()[0]['value'],
      '#format' => 'full_html'
    ];
  }

  if($node->get('field_team_select')->getValue()) {
    $elements['personal_data']['team_select'] = [
      '#type' => 'select',
      '#title' => 'Leeftijdscategorie',
      '#options' => [],
      '#required' => true,
    ];

    $options = [];
    $string = $node->get('field_team_select')->getValue();

    $list = explode("\n", $string[0]['value']);
    $list = array_map('trim', $list);
    $list = array_filter($list, 'strlen');

    foreach($list as $list_item) {
      $options[] = $list_item;
    }

    $elements['personal_data']['team_select']['#options'] = $options;
  }

  $elements['personal_data']['name'] = [
    '#type' => 'textfield',
    '#title' => 'Naam',
    '#required' => true
  ];

  $elements['personal_data']['first_name'] = [
    '#type' => 'textfield',
    '#title' => 'Voornaam',
    '#required' => true
  ];

  $elements['personal_data']['name_parent'] = [
    '#type' => 'textfield',
    '#title' => 'Naam ouder',
    '#required' => true
  ];

  $elements['personal_data']['mobile'] = [
    '#type' => 'tel',
    '#title' => 'GSM-nummer',
    '#required' => true
  ];

  $elements['personal_data']['e_mail'] = [
    '#type' => 'textfield',
    '#title' => 'E-mailadres',
    '#required' => true
  ];

  $elements['personal_data']['privacy'] = [
    '#type' => 'checkbox',
    '#title' => 'Ik ga akkoord met de <a href="https://www.remasport.be/privacy" target="_blank">privacyvoorwaarden</a>',
    '#required' => true,
    '#required_error' => 'Je moet akkoord gaan met de privacyvoorwaarden'
  ];

  // Print page
  if($node->get('field_print')->getValue()[0]['value'] == 1){
    $elements['print_page'] = [
      '#type' => 'webform_wizard_page',
      '#title' => 'Bedrukking',
      '#states' => [
        'visible' => [
          ':input[name="print_status"]' => [
            'checked' => true
          ]
        ]
      ]
    ];

    $elements['print_page']['print_description'] = [
      '#type' => 'processed_text',
      '#text' => $node->get('field_print_description')->getValue()[0]['value'],
      '#format' => 'full_html'
    ];

    $elements['print_page']['print_name'] = [
      '#type' => 'textfield',
      '#title' => 'Naam om te drukken',
      '#required' => true,
      '#input_mask' => "'casing': 'upper'"
    ];
  }

  $elements['total_amount'] = [
    '#type' => 'number',
    '#title' => 'Totaalbedrag',
    '#min' => 0,
    '#access' => FALSE,
  ];

  $elements['print_status'] = [
    '#type' => 'checkbox',
    '#title' => 'Bedrukking',
    '#access' => FALSE,
    '#attributes' => [
      'class' => [
        'hidden',
      ]
    ]
  ];

  $elements['payment_status'] = [
    '#type' => 'mollie_payment_status',
    '#title' => 'Betaling'
  ];
 
  return $elements;
}

/**
 * @param $bundles
 */
function create_selection_page($bundles, $node) {
  // Bundle selection page
  if (count($bundles) > 1) {
    $elements['selection'] = [
      '#type' => 'webform_wizard_page',
      '#title' => 'Selectie',
    ];

    // Add description
    if ($node->get('body')->getValue()) {
      $elements['selection']['selection_description'] = [
        '#type' => 'processed_text',
        '#text' => $node->get('body')->getValue()[0]['value'],
        '#format' => 'full_html'
      ];
    }

    $options = [];

    foreach ($bundles as $bundle) {
      $bundle_id = $bundle['target_id'];
      $bundle = Node::load($bundle_id);

      if ($bundle instanceof NodeInterface) {
        $options[$bundle_id] = $bundle->getTitle();
      }
    }

    // Add select
    $elements['selection']['bundle_select'] = [
      '#type' => 'radios',
      '#title' => 'Pakketten',
      '#options' => $options,
      '#required' => true,
      '#states_clear' => false,
      '#options__properties' => ''
    ];
  }
  else {
    $elements['selection'] = [
      '#type' => 'value',
      '#title' => 'Selectie',
      '#value' => $bundles[0]['target_id']
    ];
  }

  return $elements;
}


/**
 * @param $bundles
 */
function create_bundle_page($elements, $products, $node){
  // Bundle page
  $elements['bundle'] = [
    '#type' => 'webform_wizard_page',
    '#title' => 'Pakket',
  ];

  // Add description
  if($node->get('field_bundle_description')->getValue()){
    $elements['bundle']['bundle_description'] = [
      '#type' => 'processed_text',
      '#text' => $node->get('field_bundle_description')->getValue()[0]['value'],
      '#format' => 'full_html'
    ];
  }

  if (!empty($products)) {
    $elements = create_products($products, 'bundle', $elements, $node);
  }

  $elements['bundle']['bundle_total'] = [
    '#type' => 'total_sum',
    '#title' => 'Totaal',
    '#default_value' => 0
  ]; 

  return $elements;
}

/**
 * @param $extra_products
 * @param $elements
 */
function create_free_choice($elements, $extra_products, $node){ 
    $elements['extra'] = [
      '#type' => 'webform_wizard_page',
      '#title' => 'Vrije keuze',
    ];

    // Add description
    if($node->get('field_extra_description')->getValue()){
      $elements['extra']['extra_description'] = [
        '#type' => 'processed_text',
        '#text' => $node->get('field_extra_description')->getValue()[0]['value'],
        '#format' => 'full_html'
      ];
    }

    $elements = create_products($extra_products, 'extra', $elements, $node);

    $elements['extra']['extra_total'] = [
      '#type' => 'total_sum',
      '#title' => 'Totaal',
      '#default_value' => 0
    ];
  
    return $elements;
}

/**
 * @param $products
 * @param $bundle_key
 * @param $elements
 */
function create_products($products, $bundle_key, $elements, $node){
  foreach ($products as $product) {
    $product_id = $product['target_id'];

    $product = Node::load($product_id);

    if ($product instanceof NodeInterface) {
      $product_title = $product->getTitle();
      $product_id = $product->id();
      $product_key = $bundle_key.'_product_'.$product_id;

      // Product flexbox
      $elements[$bundle_key][$product_key] = [
        '#type' => 'webform_flexbox',
        '#align_items' => 'center'
      ];

      // Add product image
      $image = $product->get('field_product_image')->getValue();

      if(!empty($image)){
        $media = Media::load($image[0]['target_id']);

        if($media instanceof \Drupal\media\MediaInterface){
          $uuid = $media->uuid();

          $elements[$bundle_key][$product_key][$product_key.'_image'] = [
            '#type' => 'processed_text',
            '#text' => '<drupal-media data-entity-type="media" data-entity-uuid="'. $uuid .'" data-view-mode="product"></drupal-media>',
            '#format' => 'full_html'
          ];
        }
      }

      // Add product sizes
      $size_ranges = $product->get('field_product_size_range')->getValue();

      if (!empty($size_ranges)) {
        $options = get_size_options($size_ranges, $bundle_key);
        $attributes = get_price_attributes($size_ranges);

         $elements[$bundle_key][$product_key][$product_key.'_size'] = [
          '#type' => 'select',
          '#title' => 'Maat '.$product_title,
          '#options' => $options,
          '#attributes' => $attributes,
          '#states' => [
            'required' => [
              ':input[name="' . $product_key . '_amount"]' => [
                'filled' => true
              ]
            ]
         ],
        ];
      }

      // Add amount
      $amount = $product->get('field_product_amount')->getValue();

      if($bundle_key == 'extra'){
        $elements[$bundle_key][$product_key][$product_key.'_size']['#required'] = true;
        $elements[$bundle_key][$product_key][$product_key.'_amount'] = [
          '#type'=> 'number',
          '#title' => 'Aantal '.$product_title,
          '#states' => [
             'required' => [
               ':input[name="' . $product_key . '_size"]' => [
                 'filled' => true
               ]
             ]
          ],
          '#min' => 0,
        ];
      }
      else {
        $default_amount = 1;
        if (!empty($amount)){
          $default_amount = $amount[0]['value'];
        }

        $elements[$bundle_key][$product_key][$product_key.'_amount'] = [
          '#type'=> 'number',
          '#title' => 'Aantal '.$product_title,
          '#disabled' => true,
          '#default_value' => $default_amount,
        ];

        $bundles = $node->get('field_webform_bundles')->getValue();
        $conditions = [];

        foreach ($bundles as $bundle){
          $bundle_id = $bundle['target_id'];
          $bundle = Node::load($bundle_id);
      
          if ($bundle instanceof NodeInterface) {
            $bundle_products = $bundle->get('field_bundle_products')->getValue();
            $products_ids = [];

            foreach ($bundle_products as $bundle_product){
              if ($product_id == $bundle_product['target_id']){
                $elements[$bundle_key][$product_key]['#states']['visible'][] = [
                  ':input[name="bundle_select"]' => [
                  'value' => $bundle_id
                  ]
                ];
                $elements[$bundle_key][$product_key]['#states']['visible'][] = 'xor';
              }
            }

            if (empty($elements[$bundle_key][$product_key]['#states'])) {
              $elements[$bundle_key][$product_key]['#access'] = FALSE;
            }
          }
        }
      }

      //Add Print
      if ($node->get('field_print')->getValue()[0]['value'] == 1){
        $print = $product->get('field_product_print')->getValue();
      
        if ($print[0]['value'] == 1) {
          $elements[$bundle_key][$product_key][$product_key.'_print'] = [
            '#type'=> 'checkbox',
            '#title' => 'Bedrukken met mijn naam',
            '#description' => 'Kostprijs: &euro;4/st',
            '#description_display' => 'after'
          ];
        } 
        else {
          $elements[$bundle_key][$product_key][$product_key.'_print'] = [
            '#type'=> 'markup',
            '#markup' => 'Niet bedrukbaar',
          ];
        }
      }

    }
  }

  return $elements;
}

/**
 * @param $sizes
 * @param $bundle_key
 */
function get_price_attributes($size_ranges){
  $attributes = [];

  foreach($size_ranges as $size_range) {
    $opt_group = Node::load($size_range['target_id']);
    $attributes[$opt_group->getTitle()] = $opt_group->get('field_size_price')->getValue()[0]['value'];
  }

  return $attributes;
}

/**
 * @param $sizes
 * @param $bundle_key
 */
function get_size_options($size_ranges, $bundle_key){
  $options = [];

  foreach($size_ranges as $size_range) {
    $opt_group = Node::load($size_range['target_id']);
    $opt_title = $opt_group->getTitle();
    $opt_price = '';

    if($bundle_key == 'extra') {
      $opt_price = ' ('. $opt_group->get('field_size_price')->getValue()[0]['value'].' â‚¬)';
    }
    
    $sizes = [];

    if($opt_group instanceof NodeInterface){
      $string = $opt_group->get('field_size_values')->getValue();

      if(!empty($string)){
        $size_values = [];
        $size_price = $opt_group->get('field_size_price')->getValue();

        $list = explode("\n", $string[0]['value']);
        $list = array_map('trim', $list);
        $list = array_filter($list, 'strlen');

        foreach($list as $list_item) {
          $size_values[$opt_title. ': ' . $list_item] = $list_item;
        }

        //$sizes = unique_size_keys($size_price[0]['value'], $size_values);
      }

      $options[$opt_title] = $size_values;
    }
  }

  return $options;
}

/**
 * @param $key
 * @param $values
 */
function unique_size_keys($key, $values) {
  $sizes = [];

  for($i = 0; $i < count($values); $i++){
    $sizes[$key . str_repeat(' ', $i)] = $values[$i];
  }

  return $sizes;
}
