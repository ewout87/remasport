<?php

use Drupal\Component\Serialization\Yaml;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
use Drupal\node\NodeInterface;
use Drupal\webform\Entity\Webform;
use Drupal\node\Entity\Node;
use Drupal\webform\WebformInterface;

/**
 * @file
 * Primary module hooks for Webform Summation Field module.
 */



/**
 * Implements hook_webform_submission_presave().
 */
function mymodule_webform_submission_presave(WebformSubmission $webform_submission) {
  $total_sum_field_key = '';
  $webform = $webform_submission->getWebform();
  $webform_fields = $webform->getElementsDecoded();

  foreach ($webform_fields as $key => $value) {
    if (isset($value['#type']) && $value['#type'] == 'total_sum') {
      $total_sum_field_key = $key;
      break;
    }
  }

  if ($total_sum_field_key) {
    $data = $webform_submission->getData();
    $result = 0;
    foreach ($data as $key => $value) {
      if (isset($value['#type']) && $value['#type'] == 'computed_field') {
        $result += $value;
      }
    }
    $data[$total_sum_field_key] = $result;
    $webform_submission->setData($data);
    $webform_submission->setElementData($total_sum_field_key, $result);
    $webform->invokeHandlers('overrideSettings', $webform_submission);
  }
}

/**
 * Implements hook_webform_submit().
 */
function mymodule_webform_submit(WebformSubmission $webform_submission) {
	// Define a payment object.
	$payment = new Payment();
	$payment->context = 'donation';
	$payment->context_data = array(
	  'time' => time(),
	  'type' => 'donation',
	);
	$payment->currency_code = 'EUR';
	$payment->description = 'Basic payment form';
	$payment->finish_callback = 'MYMODULE_finish_callback';

	// Define a payment line item.
	$line_item = new PaymentLineItem();
	$line_item->amount = 100.00 / 1.21;
	$line_item->name = t('EUR 100');
	$line_item->tax_rate = 0.21;
	$line_item->quantity = 1;

	// Add the payment line item to the payment object.
	$payment->setLineItem($line_item);

	// Add the payment object to the form.
	$form_state['payment'] = $payment;

	// Get available payment methods and limit this form to Mollie payment.
	$payment_methods = $payment->availablePaymentMethods();
	$payment_options = array();
	foreach ($payment_methods as $payment_method) {
	  if ($payment_method->enabled && $payment_method->name == 'pay_with_mollie') {
	    $payment_options[] = $payment_method->pmid;
	  }
	}

	// Get the payment embed elements.
	$payment_embed_form = payment_form_embedded($form_state, $payment, $payment_options);

	// Add the embedded payment form element.
	$form['payment'] = $payment_embed_form['elements'];

	// Define the form submit callback.
	$form['#submit'] = $payment_embed_form['submit'];
}


/**
* Handle successful payment from Mollie.
*
* @param \Payment $payment
*   The returned payment object containing all relevant information.
*/
function MYMODULE_finish_callback(Payment $payment) {
  $payment_complete = FALSE;

  // Check if the payment status contains a successful state.
  foreach ($payment->statuses as $status) {
    if ($status->status == 'payment_status_success') {
      $payment_complete = FALSE;
      break;
    }
  }

  if ($payment_complete) {
    drupal_set_message('Your payment has been received.', 'success');
    // @TODO: Implement custom callbacks.
  }
}




/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function rema_webform_node_presave(NodeInterface $node)
{
  if ($node->bundle() == 'webform') {
    $webform = Webform::load('webform_' . $node->id());

    // Update webform
    if ($webform instanceof WebformInterface) {
      $settings = create_settings($node);

      $elements = create_webform($node);

      $webform->set('elements', $elements);
      $webform->set('settings', $settings);

      $webform->save();
    }

    // Create webform
    else {
      $settings = create_settings($node);

      $elements = create_webform($node);

      // Create a webform.
      $webform = Webform::create([
        'id' => 'webform_' . $node->id(),
        'title' => $node->getTitle(),
        'elements' => Yaml::encode($elements),
        'settings' => $settings,
      ]);

      $webform->save();
    }

    $node->set('webform', $webform->id());
  }
}

/**
 * @param $node
 * @return array
 */
function create_settings($node){
  $settings = [
    // Define settings.
  ];

  $confirmation_message = $node->get('field_confirmation_message')->getValue()[0]['value'];

  $confirmation_mail = $node->get('field_confirmation_mail')->getValue()[0]['value'];

  // Append default settings.
  $settings += Webform::getDefaultSettings();

  return $settings;
}

/**
 * @param $node
 */
function create_webform($node){
  $bundles = $node->get('field_webform_bundles')->getValue();

  // Build a render array of elements.
  $elements= [];

  if (!empty($bundles)) {
    $elements = create_bundles($bundles);
  }

  // Personal page
  $elements['personal_data'] = [
    '#type' => 'webform_wizard_page',
    '#title' => 'Persoonsgegevens',
    'name' => [
      '#type' => 'textfield',
      '#title' => 'Naam speler/keeper',
      '#required' => true
    ],
    'first_name' => [
      '#type' => 'textfield',
      '#title' => 'Voornaam speler/keeper',
      '#required' => true
    ],
    'name_parent' => [
      '#type' => 'textfield',
      '#title' => 'Naam ouder/voogd',
      '#required' => true
    ],
    'mobile' => [
      '#type' => 'tel',
      '#title' => 'GSM-nummer ouder/voogd',
      '#required' => true
    ],
    'e_mail' => [
      '#type' => 'textfield',
      '#title' => 'E-mailadres ouder/voogd',
      '#required' => true
    ],
    'privacy' => [
      '#type' => 'checkbox',
      '#title' => 'Ik ga akkoord met de <a href="https://www.remasport.be/privacy" target="_blank">privacyvoorwaarden</a>',
      '#required' => true,
      '#required_error' => 'Je moet akkoord gaan met de privacyvoorwaarden'
    ]
  ];

  // Confirmation page
  $elements['confirmation'] = [
    '#type' => 'webform_wizard_page',
    '#title' => 'Bevestiging',
    'confirmation_products' => [
      '#type' => 'webform_computed_token',
      '#title' => 'bevestiging producten',
      '#title_display' => 'invisible',
      '#display_on' => 'form',
      '#mode' => 'html',
      '#template' => '[webform_submission:values]',
      '#ajax' => true
    ]
  ];

  return $elements;
}

/**
 * @param $webform
 */
function update_webform($webform, $node){
  $elements = $webform->getElementsDecoded();

  // Update bundles
  $old = [];

  foreach($elements as $key => $value){
    $exp_key = explode('_', $key);
    if($exp_key[0] == 'bundle'){
      $old[] = $key;
    }
  }

  $new = $node->get('field_webform_bundles')->getValue();

  // Create new bundles
  $create = array_diff(array_values($new), $old);

  $elements = create_bundles($create);

  // Update old bundles
  $update =array_intersect(array_values($new), $old);

  $elements = update_bundles($update);

  // Delete bundles
  $delete = array_diff(array_keys($old), $new);

  $elements = delete_bundles($delete);

  // Update settings

  return $webform;
}

/**
 * @param $bundles
 */
function create_bundles($bundles){
    // Bundle selection page
    if(count($bundles) > 1) {
      $elements['selection'] = [
        '#type' => 'webform_wizard_page',
        '#title' => 'Selectie',
        'bundle_select' => [
          '#type' => 'radios',
          '#title' => 'Pakketten',
          '#options' => [],
          '#options_display' => 'buttons',
          '#required' => true,
          '#states_clear' => false,
          '#options__properties' => ''
        ]
      ];
    }

    $extra_products = [];

    foreach ($bundles as $key => $value) {
      $bundle_id = $value['target_id'];

      $bundle = Node::load($bundle_id);

      if ($bundle instanceof NodeInterface) {
        $bundle_title = $bundle->getTitle();
        $bundle_id = $bundle->id();
        $bundle_key = 'bundle_' . $bundle_id;

        if(count($bundles) > 1){
          $elements['selection']['bundle_select']['#options'][] = $bundle_title;
        }

        // Bundle page
        $elements[$bundle_key] = [
          '#type' => 'webform_wizard_page',
          '#title' => $bundle_title,
        ];

        if(count($bundles) > 1) {
          $elements[$bundle_key]['#states'] = [
            'visible' => [
              ':input[name="bundle_select"]' => [
                'value' => $key
              ]
            ]
          ];
        }

        // Add price
        $price = $bundle->get('field_bundle_price')->getValue();

        if (!empty($price)) {
          $elements[$bundle_key][$bundle_id .'_price'] = [
            '#type' => 'webform_computed_twig',
            '#title' => 'Berekening',
            '#template' => '
                  {% set total=' . $price[0]['value'] . '%}
                  {{total}}',
            '#ajax' => true,
            '#states'=> [
              'invisible' => [
                ':input[name="bundle_select"]' => [
                  'value' => $key
                ]
              ]
            ]
          ];
        }

        $elements[$bundle_key][$bundle_id .'_total'] = [
          '#type' => 'total_sum',
          '#title' => 'Totaal'
        ];

        // Add products
        $products = $bundle->get('field_bundle_products')->getValue();
        if (!empty($products)) {
          $extra_products = array_merge(array_values($extra_products), array_values($products));

          $elements = create_products($products, $bundle_key, $elements, $price);
        }
      }
    }

  // Free choice page
  $elements['extra'] = [
    '#type' => 'webform_wizard_page',
    '#title' => 'Vrije keuze',
    'extra_total' => [
      '#type' => 'total_sum',
      '#title' => 'Totaal'
    ]
  ];

  $elements = create_products($extra_products, 'extra', $elements, []);

  return $elements;
}

/**
 * @param $bundles
 */
function delete_bundles($bundles, $elements){

}

/**
 * @param $bundles
 */
function update_bundles($bundles, $elements){

}

/**
 * @param $products
 * @param $bundle_key
 * @param $elements
 */
function create_products($products, $bundle_key, $elements, $price){
  foreach ($products as $product) {
    $product_id = $product['target_id'];

    $product = Node::load($product_id);

    if ($product instanceof NodeInterface) {
      $product_title = $product->getTitle();
      $product_id = $product->id();
      $product_key = $bundle_key.'_product_'.$product_id;

      // Product flexbox
      $elements[$bundle_key][$product_key] = [
        '#type' => 'webform_flexbox'
      ];

      // Add product image
      $image = $product->get('field_product_image')->getValue();

      if(!empty($image)){
        $media = Media::load($image[0]['target_id']);

        if($media instanceof \Drupal\media\MediaInterface){
          $uuid = $media->uuid();

          $elements[$bundle_key][$product_key][$product_key.'_image'] = [
            '#type' => 'processed_text',
            '#text' => '<drupal-media data-entity-type="media" data-entity-uuid="'. $uuid .'" data-view-mode="product"></drupal-media>',
            '#format' => 'full_html'
          ];
        }
      }

      // Add product sizes
      $sizes = $product->get('field_product_size_range')->getValue();

      if (!empty($sizes)) {
        $size_range = get_size_options($sizes);

        $elements[$bundle_key][$product_key][$product_key.'_size'] = [
          '#type' => 'select',
          '#title' => 'Maat',
          '#options' => $size_range,
        ];
      }

      // Add amount
      $elements[$bundle_key][$product_key][$product_key.'_amount'] = [
        '#type'=> 'number',
        '#title' => 'Aantal',
        '#min' => 0,
      ];

      // Add calculation
      if(empty($price)){
        $elements[$bundle_key][$product_key][$product_key.'_calculation'] = [
          '#type' => 'webform_computed_twig',
          '#title' => 'Berekening',
          '#template' => '
            {% set total= 0 %}
            {% if data.' . $product_key . '_size %}
            {% set total= data.' . $product_key . '_size*data.'. $product_key .'_amount %}
            {% endif %}
            {{total}}',
          '#display_on' => 'form',
          '#hide_empty' => true,
          '#ajax' => true
        ];
      }
      else {
        $elements[$bundle_key][$product_key][$product_key.'_amount']['#default_value'] = 1;
        $elements[$bundle_key][$product_key][$product_key.'_size']['#required'] = true;
      }
    }
  }

  return $elements;
}

/**
 * @param $sizes
 */
function get_size_options($sizes){
  $size_options= [];
  $size_keys = [];
  $size_values = [];

  foreach($sizes as $size) {
    $size = Node::load($size['target_id']);

    if($size instanceof NodeInterface){
      $size_title = $size->getTitle();
      $size_price = $size->get('field_size_price')->getValue();

      $size_keys[] = $size_price[0]['value'];
      $size_values[] = $size_title;
    }
  }

  $size_options = unique_size_keys($size_keys, $size_values);

  return $size_options;
}

/**
 * @param $keys
 * @param $values
 */
function unique_size_keys($keys, $values) {
  $size_options = [];
  $unique_keys = array_unique($keys);

  for($i = 0; $i < count($keys); $i++){
    $size_options[$keys[$i] . str_repeat(' ', $i)] = $values[$i];
  }

  return $size_options;
}
