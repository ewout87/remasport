<?php

use Drupal\Component\Serialization\Yaml;
use Drupal\media\Entity\Media;
use Drupal\node\NodeInterface;
use Drupal\webform\Entity\Webform;
use Drupal\node\Entity\Node;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\webform\WebformInterface;
use Drupal\Core\Form\FormStateInterface;


/**
 * Implements hook_FORM_alter().
 */
function rema_webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'rema_webform_form_validate';
}

/**
 * Implements hook_FORM_alter().
 */
function rema_webform_form_validate(array $form, \Drupal\Core\Form\FormStateInterface $form_state){
  $node = Drupal::routeMatch()->getParameter('node');

  // Initiate total
  $total= 0;

  if($node instanceof NodeInterface){
    // Get bundle price
    $bundle = Node::load($form_state->getValue('bundle_select'));

    if($bundle instanceof NodeInterface){
      $price = $bundle->get('field_bundle_price')->getValue();

      if(isset($price) && !empty($price)){
        $total = $price[0]['value'];
      }
      else {
        $products = $bundle->get('field_bundle_products')->getValue();

        foreach ($products as $product) {
          $price = 'bundle_'. $bundle->id() .'_product_' .  $product['target_id'] . '_size';
          $amount = 'bundle_'. $bundle->id() .'_product_' . $product['target_id'] . '_amount';
    
          $total += (int)$form_state->getValue($amount) * (int)trim($form_state->getValue($price));
        }
      }
    }

    // Get products
    $products = $node->get('field_bundle_products')->getValue();

    foreach ($products as $product) {
      $price = 'extra_product_' .  $product['target_id'] . '_size';
      $amount = 'extra_product_' . $product['target_id'] . '_amount';

     $total += (int)$form_state->getValue($amount) * (int)trim($form_state->getValue($price));
    }

  $form_state->setValue('total_amount', $total);
  debug($form_state->getValue('total_amount'));
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function add_email_handler(WebformInterface $webform, $id, $to_mail, $subject, $message, $excluded_elements) {
  /** @var \Drupal\webform\WebformHandlerInterface $webform_handler_manager */
  $webform_handler_manager = \Drupal::service('plugin.manager.webform.handler');

  // Create a \Drupal\webform\Plugin\WebformHandler\EmailWebformHandler.
  $webform_handler = $webform_handler_manager->createInstance('email');

  // Configuration copied from exported webform.webform.contact.yml
  $webform_handler->setConfiguration([
    'id' => $id,
    'label' => ucfirst(str_replace('_', ' ', $id)),
    'handler_id' => $id,
    'status' => TRUE,
    'weight' => 0,
    'settings' => [
      'states' => ['completed'],
      'to_mail' => $to_mail,
      'to_options' => array(),
      'cc_mail' => '',
      'cc_options' => array(),
      'bcc_mail' => '',
      'bcc_options' => array(),
      'from_mail' => 'default',
      'from_options' => array(),
      'from_name' => 'default',
      'subject' => $subject,
      'body' => $message.'[webform_submission:values]',
      'excluded_elements' => $excluded_elements,
      'html' => TRUE,
      'attachments' => FALSE,
      'debug' => 0,
      'reply_to' => '',
      'return_path' => '',
    ],
  ]);

  // Must update original id to prevent the below error.
  // Drupal\Core\Config\ConfigNameException: The machine name of the 'Webform'
  // bundle cannot be changed in
  // Drupal\Core\Config\Entity\ConfigEntityBundleBase->preSave()
  $webform->setOriginalId($webform->id());

  // Add handle to the webform, which triggers another save().
  $webform->addWebformHandler($webform_handler);
}


/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 */
function rema_webform_node_presave(NodeInterface $node)
{
  if ($node->bundle() == 'webform') {
    $webform = Webform::load('webform_' . $node->id());

    // Update webform
    if ($webform instanceof WebformInterface) {
      // Set settings
      $settings = create_settings($node);

      // Set elements
      $elements = create_webform($node);

      $webform->set('elements', $elements);
      $webform->set('settings', $settings);

      $webform->save();
    }

    // Create webform
    else {
      // Set settings
      $settings = create_settings($node);

      // Set elements
      $elements = create_webform($node);

      // Create a webform.
      $webform = Webform::create([
        'id' => 'webform_' . $node->id(),
        'title' => $node->getTitle(),
        'elements' => Yaml::encode($elements),
        'settings' => $settings,
      ]);

      $webform->save();
    }

    // Add client email handler
    $excluded_elements = get_excluded_elements($webform);

    $email_handler = add_email_handler($webform, 'email', 'default', 'Bestelling [webform_submission:sid]', null, $excluded_elements);

    // Add client email handler
    $message = $node->get('field_confirmation_mail')->getValue();
    $subject = $node->get('field_email_subject')->getValue();

    if(!empty($message)){
      $client_email_handler = add_email_handler($webform, 'client_email', '[webform_submission:values:e_mail:raw]', $subject[0]['value'], $message[0]['value'], $excluded_elements);
    }

    $node->set('webform', $webform->id());
  }
}

/**
 * @param $node
 * @return array
 */
function create_settings($node){
  $confirmation_message = $node->get('field_confirmation_message')->getValue();

  $settings = [
    'wizard_progress_states' => TRUE,
    'confirmation_type' => 'message',
    'confirmation_message' => !empty($confirmation_message) ? $confirmation_message[0]['value'] : ''
  ];

  // Append default settings.
  $settings += Webform::getDefaultSettings();

  return $settings;
}

/**
 * @param $node
 */
function create_webform($node){
  $bundles = $node->get('field_webform_bundles')->getValue();

  // Build a render array of elements.
  $elements= [];

  if (!empty($bundles)) {
    $elements = create_bundles($bundles);
  }
  
  $extra_products = $node->get('field_bundle_products')->getValue();

  if (!empty($extra_products)) {
    $elements = create_free_choice($elements, $extra_products);
  }
  

  // Personal page
  $elements['personal_data'] = [
    '#type' => 'webform_wizard_page',
    '#title' => 'Persoonsgegevens',
    'name' => [
      '#type' => 'textfield',
      '#title' => 'Naam speler/keeper',
      '#required' => true
    ],
    'first_name' => [
      '#type' => 'textfield',
      '#title' => 'Voornaam speler/keeper',
      '#required' => true
    ],
    'name_parent' => [
      '#type' => 'textfield',
      '#title' => 'Naam ouder/voogd',
      '#required' => true
    ],
    'mobile' => [
      '#type' => 'tel',
      '#title' => 'GSM-nummer ouder/voogd',
      '#required' => true
    ],
    'e_mail' => [
      '#type' => 'textfield',
      '#title' => 'E-mailadres ouder/voogd',
      '#required' => true
    ],
    'privacy' => [
      '#type' => 'checkbox',
      '#title' => 'Ik ga akkoord met de <a href="https://www.remasport.be/privacy" target="_blank">privacyvoorwaarden</a>',
      '#required' => true,
      '#required_error' => 'Je moet akkoord gaan met de privacyvoorwaarden'
    ]
  ];

  // Confirmation page
  $elements['confirmation'] = [
    '#type' => 'webform_wizard_page',
    '#title' => 'Bevestiging',
    'confirmation_products' => [
      '#type' => 'webform_computed_token',
      '#title' => 'bevestiging producten',
      '#title_display' => 'invisible',
      '#display_on' => 'form',
      '#mode' => 'html',
      '#template' => '[webform_submission:values]',
      '#ajax' => true
    ]
  ];

  //Total amount
  $elements['total_amount'] = [
    '#type' => 'hidden'
  ];

  return $elements;
}

/**
 * @param $bundles
 */
function create_bundles($bundles){
    // Bundle selection page
    if(count($bundles) > 1) {
      $elements['selection'] = [
        '#type' => 'webform_wizard_page',
        '#title' => 'Selectie',
        'bundle_select' => [
          '#type' => 'radios',
          '#title' => 'Pakketten',
          '#options' => [],
          '#options_display' => 'side_by_side',
          '#required' => true,
          '#states_clear' => false,
          '#options__properties' => ''
        ]
      ];
    }

    foreach ($bundles as $key => $value) {
      $bundle_id = $value['target_id'];

      $bundle = Node::load($bundle_id);

      if ($bundle instanceof NodeInterface) {
        $bundle_title = $bundle->getTitle();
        $bundle_id = $bundle->id();
        $bundle_key = 'bundle_' . $bundle_id;

        if(count($bundles) > 1){
          $elements['selection']['bundle_select']['#options'][$bundle_id] = $bundle_title;
        }

        // Bundle page
        $elements[$bundle_key] = [
          '#type' => 'webform_wizard_page',
          '#title' => $bundle_title,
        ];

        if(count($bundles) > 1) {
          $elements[$bundle_key]['#states'] = [
            'visible' => [
              ':input[name="bundle_select"]' => [
                'value' => $bundle_id
              ]
            ]
          ];
        }

        
        // Add price
        $price = $bundle->get('field_bundle_price')->getValue();

        /*
        if (!empty($price)) {
          $elements[$bundle_key][$bundle_id .'_price'] = [
            '#type' => 'webform_computed_twig',
            '#title' => 'Berekening',
            '#template' => '
                  {% set total=' . $price[0]['value'] . '%}
                  {{total}} â‚¬',
            '#ajax' => true,
            '#states' => [
              'invisible' => [
                ':input[name="bundle_select"]' => [
                  'value' => $key
                ]
              ]
            ]
          ];
        }
        */

        // Add products
        $products = $bundle->get('field_bundle_products')->getValue();
        if (!empty($products)) {
          $elements = create_products($products, $bundle_key, $elements, $price);
        }

        $elements[$bundle_key][$bundle_id .'_total'] = [
          '#type' => 'total_sum',
          '#title' => 'Totaal',
        ];

        if(!empty($price)){
          $elements[$bundle_key][$bundle_id .'_total']['#min'] = $price[0]['value'];
        }
      }
    }

    return $elements;
}

/**
 * @param $extra_products
 * @param $elements
 */
function create_free_choice($elements, $extra_products){
    // Free choice page
    $elements['extra'] = [
      '#type' => 'webform_wizard_page',
      '#title' => 'Vrije keuze',
      'extra_total' => [
        '#type' => 'total_sum',
        '#title' => 'Totaal',
      ]
    ];
            
    $elements = create_products($extra_products, 'extra', $elements, []);
  
    return $elements;
}

/**
 * @param $products
 * @param $bundle_key
 * @param $elements
 */
function create_products($products, $bundle_key, $elements, $price){
  foreach ($products as $product) {
    $product_id = $product['target_id'];

    $product = Node::load($product_id);

    if ($product instanceof NodeInterface) {
      $product_title = $product->getTitle();
      $product_id = $product->id();
      $product_key = $bundle_key.'_product_'.$product_id;

      // Product flexbox
      $elements[$bundle_key][$product_key] = [
        '#type' => 'webform_flexbox',
        '#align_items' => 'center'
      ];

      // Add product image
      $image = $product->get('field_product_image')->getValue();

      if(!empty($image)){
        $media = Media::load($image[0]['target_id']);

        if($media instanceof \Drupal\media\MediaInterface){
          $uuid = $media->uuid();

          $elements[$bundle_key][$product_key][$product_key.'_image'] = [
            '#type' => 'processed_text',
            '#text' => '<drupal-media data-entity-type="media" data-entity-uuid="'. $uuid .'" data-view-mode="product"></drupal-media>',
            '#format' => 'full_html'
          ];
        }
      }

      $elements[$bundle_key][$product_key][$product_key.'_fieldset'] = [
        '#type' => 'fieldset',
        '#title' => $product_title
      ];

      // Add product sizes
      $size_ranges = $product->get('field_product_size_range')->getValue();

      if (!empty($size_ranges)) {
        $options = get_size_options($size_ranges, $bundle_key);

         $elements[$bundle_key][$product_key][$product_key.'_fieldset'][$product_key.'_size'] = [
          '#type' => 'select',
          '#title' => 'Maat '.$product_title,
          '#options' => $options,
        ];
      }
      if($bundle_key !== 'extra'){
        $elements[$bundle_key][$product_key][$product_key.'_fieldset'][$product_key.'_size']['#required'] = true;
      }

      // Add amount
      $amount = $product->get('field_product_amount')->getValue();

      if($bundle_key == 'extra'){
        $elements[$bundle_key][$product_key][$product_key.'_fieldset'][$product_key.'_amount'] = [
          '#type'=> 'number',
          '#title' => 'Aantal '.$product_title,
          '#states' => [
             'required' => [
               ':input[name="' . $product_key . '_size"]' => [
                 'filled' => true
               ]
             ]
          ],
          '#min' => 0,
        ];
      }
      else {
        $default_amount = 1;

        if(!empty($amount)){
          $default_amount = $amount[0]['value'];
        }

         $elements[$bundle_key][$product_key][$product_key.'_fieldset'][$product_key.'_amount'] = [
          '#type'=> 'number',
          '#title' => 'Aantal '.$product_title,
          '#disabled' => true,
          '#default_value' => $default_amount,
        ];
      }

      /*
      // Add calculation
      if(empty($price)){
        $elements[$bundle_key][$product_key][$product_key.'_fieldset'][$product_key.'_calculation'] = [
          '#type' => 'webform_computed_twig',
          '#title' => 'Prijs',
          '#template' => '
            {% set total= 0 %}
            {% if data.' . $product_key . '_size %}
            {% set total= data.' . $product_key . '_size*data.'. $product_key .'_amount %}
            {% endif %}
            {{total}}',
          '#display_on' => 'form',
          '#hide_empty' => true,
          '#ajax' => true
        ];
      }
      else {
        $elements[$bundle_key][$product_key][$product_key.'_fieldset'][$product_key.'_size']['#required'] = true;
      }*/
    }
  }

  return $elements;
}

/**
 * @param $sizes
 * @param $bundle_key
 */
function get_size_options($size_ranges, $bundle_key){
  $options = [];

  foreach($size_ranges as $size_range) {
    $opt_group = Node::load($size_range['target_id']);
    $opt_title = $opt_group->getTitle();
    $opt_price = '';

    if($bundle_key == 'extra') {
      $opt_price = ' ('. $opt_group->get('field_size_price')->getValue()[0]['value'].' â‚¬)';
    }
    

    $sizes = [];

    if($opt_group instanceof NodeInterface){
      $string = $opt_group->get('field_size_values')->getValue();

      if(!empty($string)){
        $size_values = [];
        $size_price = $opt_group->get('field_size_price')->getValue();

        $list = explode("\n", $string[0]['value']);
        $list = array_map('trim', $list);
        $list = array_filter($list, 'strlen');

        foreach($list as $list_item) {
          $size_values[] = $list_item;
        }

        $sizes = unique_size_keys($size_price[0]['value'], $size_values);
      }

      $options[$opt_title . $opt_price] = $sizes;
    }
  }

  return $options;
}

/**
 * @param $key
 * @param $values
 */
function unique_size_keys($key, $values) {
  $sizes = [];

  for($i = 0; $i < count($values); $i++){
    $sizes[$key . str_repeat(' ', $i)] = $values[$i];
  }

  return $sizes;
}

/**
 * @param $webform
 */
function get_excluded_elements(WebformInterface $webform) {
  $excluded_elements = [];

  if($webform instanceof WebformInterface){
    $elements = $webform->getElementsDecodedAndFlattened();

    foreach($elements as $key => $value) {
      $exclude = [
        'processed_text',
        'webform_computed_twig',
      ];

      if(in_array($value['#type'], $exclude)) {
        $excluded_elements[] = $key;
      }
    }
  }

  return $excluded_elements;
}
